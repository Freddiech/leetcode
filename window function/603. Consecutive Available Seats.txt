#  603. Consecutive Available Seats
#  Easy
#  498
#  45
#  Add to List
#  Share

#Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content##Content#

#  SQL Schema
#  Table: Cinema
#  +-------------+------+
#  | Column Name | Type |
#  +-------------+------+
#  | seat_id     | int  |
#  | free        | bool |
#  +-------------+------+
#  seat_id is an auto-increment primary key column for this table.
#  Each row of this table indicates whether the ith seat is free or not. 1 means free while 0 means occupied.
#    Write an SQL query to report all the consecutive available seats in the cinema.
#  Return the result table ordered by seat_id in ascending order.
#  The test cases are generated so that more than two seats are consecutively available.
#  The query result format is in the following example.
#    Example 1:
#  Input: 
#  Cinema table:
#  +---------+------+
#  | seat_id | free |
#  +---------+------+
#  | 1       | 1    |
#  | 2       | 0    |
#  | 3       | 1    |
#  | 4       | 1    |
#  | 5       | 1    |
#  +---------+------+
#  Output: 
#  +---------+
#  | seat_id |
#  +---------+
#  | 3       |
#  | 4       |
#  | 5       |
#  +---------+

#Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution##Solution#
#SOLUTION 1 JOIN

SELECT DISTINCT a.seat_id 
FROM cinema AS a JOIN cinema AS b 
ON ABS ( a.seat_id - b.seat_id ) = 1 
	AND a.FREE = 1 
	AND b.FREE = 1 
ORDER BY a.seat_id;


# SOLUTION 2 WINDOW FUNCTION

WITH cte AS(
SELECT *,seat_id-ROW_NUMBER()OVER(ORDER BY seat_id) AS rn FROM Cinema
WHERE free=1
)
, cte2 AS(
SELECT 
    seat_id
    ,COUNT(*)OVER(PARTITION BY rn ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ck 
FROM cte
)

SELECT seat_id FROM cte2
WHERE ck>=2
ORDER BY seat_id;